{"version":3,"sources":["components/Remove.js","components/Person.js","components/Search.js","components/AddPerson.js","components/AddressBook.js","components/SuccessNotification.js","components/FailNotification.js","services/api.js","App.js","serviceWorker.js","index.js"],"names":["Remove","person","remove","onClick","id","Person","update","key","style","margin","padding","name","number","Search","searchForPerson","searchValue","handleSearchChange","results","onSubmit","value","type","onChange","map","result","AddPerson","addPerson","newName","handlePersonChange","newNumber","handleNumberChange","AddressBook","persons","SuccessMessage","styled","div","SuccessNotification","message","undefined","ErrorMessage","FailNotification","baseUrl","axios","get","then","res","data","personObj","post","updatedPerson","put","delete","App","useState","setPersons","setNewName","setNewNumber","setSearchValue","setResults","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","api","initialPeople","catch","e","updateNumber","newObject","setTimeout","preventDefault","target","filteredResult","filter","includes","newPerson","record","find","console","log","window","confirm","Math","random","removedPerson","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.757caa9e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Remove = ({ person, remove }) => {\n    return (\n        <button onClick={() => {\n            remove(person.id)\n        }}>\n            remove\n        </button>\n    )\n}\n\nexport default Remove;\n","import React from 'react'\nimport Remove from './Remove';\n\nconst Person = ({ person, remove, update }) => {\n    return (\n            <div key={person.id} style={{ margin: '10px', padding: '5px' }}>\n                <span>{person.name}</span>:<span>  -  </span>\n                <span>{person.number}</span>\n                <Remove\n                    person={person}\n                    remove={remove}\n                    update={update}\n                    id={person.id}\n                />\n            </div>\n    )\n};\n\nexport default Person;\n","import React from 'react'\nimport Person from './Person';\n\nconst Search = ({ searchForPerson, searchValue, handleSearchChange, results }) => (\n    <div>\n        <h4>Search for a Contact</h4>\n        <form onSubmit={searchForPerson}>\n            <input\n                value={searchValue}\n                type=\"text\"\n                onChange={handleSearchChange}\n            />\n            <button type='submit'>Search</button>\n        </form>\n\n        <div>\n            {results.map(result => {\n                return <Person key={result.id} name={result.name} number={result.number} />\n            })}\n        </div>\n    </div>\n);\n\nexport default Search;","import React from 'react'\n\nconst AddPerson = ({ addPerson, newName, handlePersonChange, newNumber, handleNumberChange }) => (\n    <div>\n        <form onSubmit={addPerson}>\n            <div>\n                Name: <span> </span>\n                <input\n                    value={newName}\n                    type='text'\n                    onChange={handlePersonChange}\n                />\n            </div>\n            <div>\n                Number: <span> </span>\n                <input\n                    type=\"text\"\n                    value={newNumber}\n                    onChange={handleNumberChange}\n                />\n            </div>\n            <div>\n                <button type='submit'>Add</button>\n            </div>\n        </form>\n    </div>\n);\n\n\nexport default AddPerson;","import React from 'react';\nimport Person from './Person';\n\nconst AddressBook = ({ persons, remove, update }) => (\n    <div>\n        <h2>Address Book</h2>\n        <ul>\n            {persons.map(person => {\n                return (\n                    <Person \n                        person={person}\n                        key={person.id}\n                        remove={remove}\n                        update={update}\n                    />\n                )\n            })}\n        </ul>\n    </div>\n);\n\nexport default AddressBook;\n","import React from 'react'\nimport styled from 'styled-components';\n\nconst SuccessMessage = styled.div`\n    font-weight: 600;\n    color: white;\n    background-color: #37CC57;\n    border-radius: 3px;\n    padding: 8px;\n    margin: 20px;\n    border: 1px solid green;\n    display: inline-block;\n`;\n\nconst SuccessNotification = ({ message }) => {\n    return message === null || message === undefined || message === ''\n        ? null\n        : <SuccessMessage>{message}</SuccessMessage>\n}\n\nexport default SuccessNotification;\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst ErrorMessage = styled.div`\n    font-weight: 600;\n    color: white;\n    background-color: #FF7E73;\n    border-radius: 3px;\n    padding: 8px;\n    margin: 20px;\n    border: 1px solid red;\n    display: inline-block;\n`;\n\nconst FailNotification = ({ message }) => {\n    return message === null || message === undefined || message === ''\n        ? null\n        : <ErrorMessage>{ message }</ErrorMessage>\n}\n\nexport default FailNotification;\n","import axios from 'axios';\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(res => res.data);\n}\n\nconst create = personObj => {\n    const request = axios.post(`${ baseUrl }`, personObj);\n    return request.then(res => res.data);\n}\n\nconst update = (id, updatedPerson) => {\n    const request = axios.put(`${ baseUrl }/${ id }`, updatedPerson)\n    return request.then(res => res.data);\n}\n\nconst remove = id => {\n    const request = axios.delete(`${ baseUrl }/${ id }`, id);\n    return request.then(res => res.data);\n}\n\nexport default { getAll, create, update, remove }\n","import React, { useState, useEffect } from 'react';\nimport Search from './components/Search';\nimport AddPerson from './components/AddPerson';\nimport AddressBook from './components/AddressBook';\nimport SuccessNotification from './components/SuccessNotification';\nimport FailNotification from './components/FailNotification';\nimport api from './services/api';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [searchValue, setSearchValue] = useState('');\n  const [results, setResults] = useState([]);\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    api\n      .getAll()\n      .then(initialPeople => {\n        setPersons(initialPeople)\n      })\n      .catch(e => `Error: ${e}`);\n  }, [])\n\n  const addPerson = e => {\n    e.preventDefault();\n    let newPerson = { name: e.target[0].value, number: e.target[1].value };\n    if (persons.map(person => person.name).includes(newPerson.name)) {\n      const record = persons.map(person => person).find(person => person.name === newPerson.name);\n      console.log(newPerson);\n      let res = window.confirm(`${newPerson.name} is already in the Phone Book. Would you like to update their number to the one provided?`)\n      if (res) {\n        updateNumber(record.id, newPerson)\n      } else {\n        setPersons(persons);\n        setNewName('');\n        setNewNumber('');\n      };\n    } else {\n      newPerson.id = Math.random()\n      api\n        .create(newPerson)\n        .then(newPerson => {\n          setPersons([...persons, newPerson])\n          setNewName('')\n          setNewNumber('')\n          setSuccessMessage('Successfully added contact')\n          setTimeout(() => {\n            setSuccessMessage(null);\n          }, 5000)\n        })\n        .catch(e => {\n          setErrorMessage('Error adding contact')\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000);\n        })\n    }\n  };\n\n  const updateNumber = (id, newObject) => {\n    api\n      .update(id, newObject)\n      .then(updatedPerson => {\n        setPersons(persons.map(person => person.id ? person : updatedPerson))\n        setNewNumber('')\n        setNewName('');\n        setSuccessMessage('Successfully updated number!');\n        setTimeout(() => {\n          setSuccessMessage('');\n        }, 5000)\n      })\n      .catch(e => {\n        setSuccessMessage('');\n        setErrorMessage('Error updating number. That contact was recently deleted');\n      })\n  }\n\n  const removePerson = id => {\n    api\n      .remove(id)\n      .then(removedPerson => {\n        setPersons(persons);\n        setErrorMessage('');\n        setSuccessMessage('Successfully removed!');\n      })\n      .catch(e => {\n        setSuccessMessage('');\n        setErrorMessage('Could not remove contact');\n      })\n  }\n\n  const searchForPerson = e => {\n    e.preventDefault();\n    const searchValue = e.target[0].value;\n    if (searchValue === '' || searchValue === ' ') {\n      return\n    } else {\n      const filteredResult = persons.filter(person => person.name.includes(searchValue))\n      setResults(filteredResult);\n    }\n  }\n\n  const handlePersonChange = e => {\n    setNewName(e.target.value);\n  }\n\n  const handleNumberChange = e => {\n    setNewNumber(e.target.value);\n  }\n\n  const handleSearchChange = e => {\n    setSearchValue(e.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Phone Book</h1>\n      <Search \n        searchForPerson={searchForPerson} \n        searchValue={searchValue} \n        handleSearchChange={handleSearchChange}\n        results={results}\n      />\n\n      <AddPerson \n        addPerson={addPerson} \n        newName={newName} \n        handlePersonChange={handlePersonChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange} \n      />\n      <SuccessNotification message={successMessage} />\n      <FailNotification message={errorMessage} />\n\n      <AddressBook \n        persons={persons}\n        remove={removePerson}\n        update={updateNumber}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}